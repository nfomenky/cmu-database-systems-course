<!DOCTYPE html>
<html lang="en"
      xmlns:og="https://ogp.me/ns#"
      xmlns:fb="https://www.facebook.com/2008/fbml">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta name="description" content="" />
    <meta name="keywords" content="" />
    <!--[if lte IE 8]><script src="../css/ie/html5shiv.js"></script><![endif]-->
    <script src="../js/jquery.min.js"></script>
    <script src="../js/jquery.dropotron.min.js"></script>
    <script src="../js/skel.min.js"></script>
    <script src="../js/skel-layers.min.js"></script>
    <script src="../js/init.js"></script>
    <link rel="stylesheet" href="../css/pygment.css" />
    <noscript>
        <link rel="stylesheet" href="../css/skel.css" />
        <link rel="stylesheet" href="../css/style.css" />
        <link rel="stylesheet" href="../css/style-noscript.css" />
    </noscript>
    <script src="//cdnjs.cloudflare.com/ajax/libs/modernizr/2.6.2/modernizr.min.js"></script>
    <link href="//netdna.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">
    <link  href="//fonts.googleapis.com/css?family=Anonymous+Pro:regular,italic,bold,bolditalic" rel="stylesheet" type="text/css" >
    <!--[if lte IE 8]><link rel="stylesheet" href="/css/ie/v8.css" /><![endif]-->
    <!--[if lte IE 9]><link rel="stylesheet" href="/css/ie/v9.css" /><![endif]-->
    
    
    <meta property="og:site_name" content="CMU 15-445/645" />
    <meta property="og:type" content="article"/>
    <meta property="og:title" content="Homework #1 - SQL - CMU 15-445/645 :: Intro to Database Systems (Fall 2017)"/>
    <meta property="og:url" content="../homework1/index.html"/>
    <meta property="article:published_time" content="2017-09-02" />
    <meta property="og:description" content="Overview The first homework is to construct a set of SQL queries for analysing a dataset that will be provided to you. The dataset contains information about every court case on the Maryland Judiciary Court Search website from the past decade. We focus on Maryland because Andy is a Maryland native and the members of the TA team were curious about his criminal past. This homework is an opportunity to: (1) learn basic and certain advanced SQL features, and (2) get familiar with using the SQLite DBMS. This is the same relational DBMS that you will be hacking on during â€¦" />
        <meta property="og:image"
              content="https://15445.courses.cs.cmu.edu/fall2017/images/twitter-card.jpg"/>

    <meta name="twitter:card" content="summary">
        <meta name="twitter:site" content="@CMUDB">
        <meta name="twitter:creator" content="@CMUDB">
    <meta name="twitter:domain" content="..">
            <meta property="twitter:image"
                  content="https://15445.courses.cs.cmu.edu/fall2017/images/twitter-card.jpg"/>
    
    
    <link href="https://db.cs.cmu.edu/favicon.png" rel="icon">

    <title>Homework #1 - SQL | CMU 15-445/645 :: Intro to Database Systems (Fall 2017) </title>
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width">
</head>

<body class=" loading">

    <!-- Header -->
    <header id="header" >
        <h1 class="logo">
            <a href="..">CMU 15-445/645</a>
        </h1>
        <nav id="nav">
            <ul>
                <li ><a href="index.html">Home</a></li>
                            <li><a href="../assignments.html">Assignments</a>
                            <li><a href="../schedule.html">Schedule</a>
                            <li><a href="../syllabus.html">Syllabus</a>
                <!--
                <li class="submenu">
                    <a href="../">Blog</a>
                    <ul>
                    </ul>
                </li>
                -->
                <li> <a title="Youtube" href="https://www.youtube.com/playlist?list=PLSE8ODhjZXjYutVzTeAds8xUt1rcmyT7x" target="_new"><i class="fa fa-youtube"></i> Youtube</a>
                <li> <a title="Canvas" href="https://canvas.cmu.edu/courses/1678" target="_new"><i class="fa fa-comments-o"></i> Canvas</a>
                
            </ul>
        </nav>
    </header>

<!-- Main -->
<article id="main">

    <header class="special container">
        <span class="icon fa-database"></span>
        <h2>Homework #1 - SQL</h2>
    </header>

    <section class="wrapper style4 container">
  
        <!-- Content -->
        <div class="content">
            <section>
                <p><h1>Overview</h1>
<p>The first homework is to construct a set of SQL queries for analysing a dataset that will be provided to you. The dataset contains information about 
every court case on the Maryland Judiciary Court Search website from the past decade. We focus on Maryland because Andy is a Maryland native and the members of the TA team were curious about his criminal past.</p>
<p>This homework is an opportunity to: (1) learn basic and certain advanced SQL features, and (2) get familiar with using the <a onclick="javascript:pageTracker._trackPageview('/outgoing/www.sqlite.org');" href="https://www.sqlite.org/">SQLite</a> DBMS. This is the same relational DBMS that you will be hacking on during the rest of the semester.</p>
<p>This is a single-person project that will be completed individually (i.e., no groups).</p>
<!-- START hw1 -->

<!-- AUTO-GENERATED BY GENERATE-SCHEDULE SCRIPT -->

<!-- ANY MODIFICATIONS WILL BE OVERWRITTEN -->

<ul>
<li><b>Release Date:</b> Aug 28, 2017</li>
<li><b>Due Date:</b> Sep 13, 2017 @ 11:59pm
<!-- END hw1 --></li>
</ul>
<h1>Project Specification</h1>
<p>The homework contains 12 questions in total, and will be graded out of 100 points. For each question, you will need to construct a SQL query that fetches the desired data from the SQLite DBMS. Here's a rough time estimate: 1-2 hours for setting up SQLite; approx. 4-6 hours for completing the questions.</p>
<p>We provide the database dump (<a onclick="javascript:pageTracker._trackPageview('/downloads/../files/md_courts.dump.gz');" href="../files/md_courts.dump.gz"><code>md_courts.dump.gz</code></a>) on which your queries will be executed. We will also provide a compressed folder (<a onclick="javascript:pageTracker._trackPageview('/downloads/../files/sql.tar.gz');" href="../files/sql.tar.gz"><code>sql.tar.gz</code></a>)  containing empty placeholder files (<code>00.txt</code>,<code>01.txt</code>,...,<code>12.txt</code>). You will need to fill in the <strong>output</strong> of the SQL queries in these placeholder files. </p>
<p>You can decompress this folder by running the following command on the terminal:</p>
<pre>
$ tar -zxvf sql.tar.gz
</pre>

<p>After filling in the queries, you can compress the folder by running the following command:</p>
<pre>
$ tar -czvf sql.tar.gz hw1
</pre>

<h1>Instructions</h1>
<h2>Setting Up SQLite</h2>
<p>You will first need to install SQLite on your development machine.</p>
<h3>Install SQLite3 on Ubuntu Linux</h3>
<p>Install the <code>sqlite3</code> and <code>libsqlite3-dev</code> packages by running the following command;</p>
<pre>
$ sudo apt-get install sqlite3 libsqlite3-dev
</pre>

<h3>Install SQLite3 on Mac OS X</h3>
<p>On Mac OS Leopard or later, you don't have to! It comes pre-installed. You can upgrade it, if you absolutely need to, with <a onclick="javascript:pageTracker._trackPageview('/outgoing/mxcl.github.com');" href="http://mxcl.github.com/homebrew/">Homebrew</a>.</p>
<h2>Load the Database Dump</h2>
<ol>
<li>
<p>Check if <code>sqlite3</code> is properly working by <a onclick="javascript:pageTracker._trackPageview('/outgoing/sqlite.org');" href="https://sqlite.org/cli.html#getting_started">following this tutorial</a>.</p>
</li>
<li>
<p>Download the <a onclick="javascript:pageTracker._trackPageview('/downloads/../files/md_courts.dump.gz');" href="../files/md_courts.dump.gz">database dump file</a>: </p>
</li>
</ol>
<pre>
$ wget <a onclick="javascript:pageTracker._trackPageview('/downloads/../files/md_courts.dump.gz');" href="../files/md_courts.dump.gz">http://15445.courses.cs.cmu.edu/fall2017/files/md_courts.dump.gz</a>
</pre>

<ol>
<li>Reconstruct the database from the provided database dump by running the following command on your shell. This page contains <a onclick="javascript:pageTracker._trackPageview('/outgoing/sqlite.org');" href="https://sqlite.org/cli.html#converting_an_entire_database_to_an_ascii_text_file">more details</a>.</li>
</ol>
<pre>
$ zcat md_courts.dump.gz | sqlite3 md_courts
</pre>

<ol>
<li>Check the contents of the database by running the <code>.tables</code> command on the <code>sqlite3</code> terminal. You should see <strong>9 tables</strong>, and the output should look like this:</li>
</ol>
<pre>
$ sqlite3 md_courts.db
SQLite version 3.11.0
Enter ".help" for usage hints.
sqlite> .tables
attorneys   charges     documents   judgements  rawcases  
cases       complaints  events      parties
</pre>

<h2>Placeholder Folder</h2>
<p>Download the placeholder folder at <a onclick="javascript:pageTracker._trackPageview('/downloads/../files/sql.tar.gz');" href="../files/sql.tar.gz">here</a>:</p>
<pre>
$ wget <a onclick="javascript:pageTracker._trackPageview('/downloads/../files/sql.tar.gz');" href="../files/sql.tar.gz">http://15445.courses.cs.cmu.edu/fall2017/files/sql.tar.gz</a>
$ tar zxfv sql.tar.gz
</pre>

<p>This should contain empty placeholder files (<code>00.txt</code>,<code>01.txt</code>,...,<code>12.txt</code>).</p>
<h2>Sanity Checks</h2>
<ol>
<li>Get familiar with the schema (structure) of the tables (what attributes do they contain, what are the primary and foreign keys, etc.). Run the <code>.schema $TABLE_NAME</code> command on the <code>sqlite3</code> terminal for each table. The output should look like this:</li>
</ol>
<pre>
sqlite> .schema cases
CREATE TABLE cases (
    case_id character varying NOT NULL PRIMARY KEY,
    "timestamp" timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    title character varying,
    court_system character varying,
    type character varying,
    filing_date date,
    status character varying,
    disposition character varying,
    disposition_date date,
    violation_county character varying,
    violation_date date
);
sqlite> .schema attorneys
CREATE TABLE attorneys (
    case_id character varying NOT NULL,
    name character varying,
    type character varying,
    appearance_date date,
    removal_date date,
    practice_name character varying,
    address character varying,
    city character varying,
    state character varying,
    zip character varying,
    FOREIGN KEY (case_id) REFERENCES cases(case_id)    
);
CREATE INDEX attorneys_case_id_idx ON attorneys (case_id);
</pre>

<ol>
<li>Perform a sanity check by running the following query: </li>
</ol>
<p><strong>Q0 [0 points]:</strong> Count the number of cases in the Maryland Judiciary Court System. The output should look like this (only a single number):
<pre>
sqlite&gt; select ...;
12345
</pre></p>
<p><strong>Details:</strong> Make use of the <code>count</code> function.</p>
<p><strong>Answer</strong>: Here's the correct SQL query and expected output:</p>
<pre>
sqlite> select count(case_id) from cases;
2000728
</pre>

<ol>
<li>To redirect the output of this SQL query to the appropriate file (<code>00.txt</code>) in the submission directory (<code>sql</code>), enter the above query string (including ';') into a sql file (<code>00.sql</code>) and then run the following command:</li>
</ol>
<pre>
$ sqlite3 md_courts.db < 00.sql > sql/00.txt
</pre>

<ol>
<li>Now, you can verify the contents of the output text file (<code>00.txt</code>):</li>
</ol>
<pre>
cat solutions/00.txt
2000728
</pre>

<h2>Construct the SQL Queries</h2>
<p>Now, its time to start constructing the SQL queries and fill in their output into the placeholder files.</p>
<p><strong>Q1 [5 points]:</strong> Count the number of attorneys in the system. The output should look like this (only a single number):
<pre>
sqlite&gt; select ...;
12345
</pre>
<strong>Details:</strong> Ensure that there are no duplicates.</p>
<p><strong>Q2 [5 points]:</strong> Repeated phone calls can sometimes land you in jail. Count the number of charges related to phone calls by examining their description. The output should look like this:
<pre>
12345
</pre>
<strong>Details:</strong> The search string for the appropriate column is <code>%PHONE%</code>.</p>
<p><strong>Q3 [5 points]:</strong> Reckless endangerment is another reason why one can end up in a courthouse. Count the number of cases related to reckless endangerment in each county. The output should look like this:
<pre>
County A|500
County B|400
County C|300
</pre>
<strong>Details:</strong> Print the county name and number of cases in that particular county. Sort the counties by the number of cases in descending order, and break ties by ordering them in ascending order with respect to the county name. Report only the top <code>3</code> counties with the maximum number of cases. The search string for the appropriate column is <code>%RECKLESS%</code>. Ensure that you only fetch the cases whose county name is not empty.</p>
<p><strong>Q4 [5 points]:</strong> Let's now go back in time and look at the cases filed in the 1950s. The output should look like this:
<pre>
CASE1|1950-03-12
CASE2|1951-01-01
CASE3|1952-01-01
</pre>
<strong>Details:</strong> Print the case id and filing date for the cases filed in the 1950s. List the oldest cases first, and report only the earliest 3 cases.</p>
<p><strong>Q5 [10 points]:</strong> It looks like a lot of cases got filed in the 1950s. In which decades did the most number of cases get filed? The output should look like this:
<pre>
10000|1970s
5000|2000s
1000|1980s
</pre>
<strong>Details:</strong> Print the number of cases and the relevant decade. We will print the relevant decade in a fancier format by constructing a string that looks like this <code>1970s</code>. Sort the decades in decreasing order with respect to the number of cases. Report only the top <code>3</code> decades wherein the most number of cases got filed. Ensure that you only fetch the cases whose filing date is not empty.</p>
<p><strong>Q6 [5 points]:</strong> Cases can often be closed for bizzare reasons. One such reason is statistics. Determine the percentage of cases that were statistically closed. The output should look like this:
<pre>
5.123456789
</pre>
<strong>Details:</strong> Print the percentage of cases. To compute the percentage, you will need to multiply the numerator of the fraction by <code>100.0</code>. While searching the case's status, use the following string: <code>Case Closed Statistically</code>. To keep things simple, there is no need to truncate or round numbers. To compute the percentage, simply multiply the numerator by <code>100.0</code> and divide by the appropriate denominator.</p>
<p><strong>Q7 [5 points]:</strong> Let's look at some prolific defendants. List the top 3 parties who have been charged in the most number of distinct counties. The output should look like this:
<pre>
A|100
B|50
C|10
</pre>
<strong>Details:</strong> Print the name of the party along with the number of distinct counties. Sort the parties by the number of distinct counties in descending order, and report only the top <code>3</code> parties. Ensure that you only fetch the parties who are defendants (<code>Defendant</code>) and whose name is not empty.</p>
<p><strong>Q8 [20 points]:</strong> How does the average age of guilty criminals vary over time? The output should look like this:
<pre>
2017|50.123456789
2016|55.123456789
2015|60.123456789
2014|55.123456789
2013|50.123456789
</pre>
<strong>Details:</strong> Print the filing year and the average age of the criminals that were found guilty in cases filed in that particular year. To compute the average age, first determine the age of the criminal by using the case's filing date and the party's date of birth. Use the <code>strftime('%Y.%m%d',...)</code> function for this purpose. To determine the filing year from the filing date, again make use of the <code>strftime('%Y',...)</code> function. Look at the disposition to pick only <code>Guilty</code> parties (<code>charges.disposition = 'Guilty'</code>). Ensure that you only fetch the cases whose filing date is not empty. Also, ensure that you only fetch the parties who are defendants (<code>parties.type = Defendant</code>), whose name is not empty, whose date of birth is not empty, and whose computed age is greater than <code>0</code> and less than <code>100</code> years. List the tuples in descending order with respect to the filing year and only display <code>5</code> tuples. You might want to leverage common table expressions (CTEs) in this query. Here's more information on <a onclick="javascript:pageTracker._trackPageview('/outgoing/sqlite.org');" href="https://sqlite.org/lang_with.html">using CTEs in SQLite</a>.</p>
<p><strong>Q9 [15 points]:</strong> Let's next look at case disposition by race to see if there is any inherent bias in the system. The output should look like this:
<pre>
African American|Guilty|60.000
African American|Not Guilty|40.000
Caucasian|Guilty|50.000
Caucasian|Not Guilty|50.000
</pre>
<strong>Details:</strong> Print the race, the case disposition, and the percentage of cases disposed with that verdict. Let's restrict our focus to <code>2</code> races (<code>African American</code>, <code>Caucasian</code>), and <code>2</code> types of case disposition (<code>Guilty</code>, <code>Not Guilty</code>). To compute the percentage, you will need to multiply the numerator of the fraction by <code>100.0</code>. Ensure that the race of the party is not empty. You might want to leverage common table expressions (CTEs) in this query. Here's more information on <a onclick="javascript:pageTracker._trackPageview('/outgoing/sqlite.org');" href="https://sqlite.org/lang_with.html">using CTEs in SQLite</a>.</p>
<p><strong>Q10 [5 points]:</strong> Certain zip codes might have -- ahem -- more interesting citizens than Squirrel Hill. Retrieve the top 3 zip codes in Maryland where the most number of cases were filed. The output should look like this:
<pre>
21000|500
21001|400
21002|300
</pre>
<strong>Details:</strong> Print the zip code along with the number of cases filed in that particular zip code. List them in decreasing order with respect to the number of cases. Display only the top <code>3</code> zip codes. Ensure that the zip code is not empty.</p>
<p><strong>Q11 [15 points]:</strong> Some attorneys are awesome at their job. List the top 5 attorneys in Maryland by examining the number of cases that an attorney handles and the percentage of cases wherein they were successful. The output should look like this:
<pre>
A|100|60.123
B|200|45.123
C|100|30.123
D|500|20.123
E|100|10.123
</pre>
<strong>Details:</strong> Print the attorney's name, number of cases handled, and the percentage of cases won (i.e. the disposition was <code>Not Guilty</code>). Examine only attorneys who have handled more than <code>100</code> cases. List the attorneys in decreasing order with respect to their success percentage and number of cases handled, respectively. Display only the top <code>5</code> attorneys. Ensure that the attorney's name is not empty. You might want to leverage common table expressions (CTEs) in this query. Here's more information on <a onclick="javascript:pageTracker._trackPageview('/outgoing/sqlite.org');" href="https://sqlite.org/lang_with.html">using CTEs in SQLite</a>.</p>
<p><strong>Q12 [5 points]:</strong> Find the attorney with the seventh highest success percentage (by extending the previous query). The output should look like this:
<pre>
G|50|5.123
</pre></p>
<p><strong>Details:</strong> Print the attorney's name, number of cases handled, and the percentage of cases won (i.e. the disposition was <code>Not Guilty</code>). Examine only attorneys who have handled more than <code>100</code> cases. Ensure that the attorney's name is not empty.</p>
<h1>Grading Rubric</h1>
<p>Each submission will be graded based on whether the SQL queries fetch the expected sets of tuples from the database. Note that your SQL queries will be auto-graded by comparing their outputs (i.e. tuple sets) to the correct outputs. For your queries, the <strong>order</strong> of the output columns is important; their names are not.</p>
<h1>Late Policy</h1>
<p>See the <a href="../syllabus.html#late-policy">late policy</a> in the syllabus.</p>
<h1>Submission</h1>
<p>We use Autolab for grading in order to provide you with immediate feedback. After completing the homework, you can submit your compressed folder <code>sql.tar.gz</code> (only one file) to Autolab:</p>
<ul>
<li><a onclick="javascript:pageTracker._trackPageview('/outgoing/autolab.andrew.cmu.edu');" href="https://autolab.andrew.cmu.edu/courses/15445-f17/assessments/hello">https://autolab.andrew.cmu.edu/courses/15445-f17</a></li>
</ul>
<p>We will be comparing the output files using a function similar to <code>diff</code>. Ensure that your output matches the expected output in <code>00.txt</code>. You can submit your answers as many times as you like. Your score will be sent via email to your andrew account within a few minutes after your submission.</p>
<p><strong>Additional Rule:</strong> In addition to placing the text files containing the query output in <code>sql.tar.gz</code>, you will also need to submit all the SQL queries in files named <code>00.sql</code>, <code>01.sql</code>, ..., <code>13.sql</code> in the same folder. If your handin folder <code>sql.tar.gz</code> does not contain these files with SQL queries, your final homework score will unfortunately be reduced.</p>
<p><strong>We have downloaded the submission order and scoreboard before this rule was added. We will align your rankings with your prior submission order. Adding the SQL queries will not affect you earlier rankings.</strong></p>
<h1>Collaboration Policy</h1>
<ul>
<li>Every student has to work individually on this assignment.</li>
<li>Students are allowed to discuss high-level details about the project with others.</li>
<li>Students are <strong>not</strong> allowed to copy the contents of a white-board after a group meeting with other students.</li>
<li>Students are <strong>not</strong> allowed to copy the solutions from another colleague.</li>
</ul>
<p class="warning bg-danger">
    <i class="trigger fa fa-exclamation-triangle fa-lg"></i>
    <b>WARNING:</b> All of the code for this project must be your own. You may not copy source code from other students or other sources that you find on the web. Plagiarism <b>will not</b> be tolerated. See CMU's <a onclick="javascript:pageTracker._trackPageview('/outgoing/www.cmu.edu');" href="http://www.cmu.edu/policies/documents/Academic%20Integrity.htm">Policy on Academic Integrity</a> for additional information.
</p></p>
                <div class="published">
                    <time datetime="2017-09-02 10:49:12.920809-04:00"> <B>Last Updated:</B> Sep 02, 2017</time>
                </div>
            </section>
        </div>
    </section>
</article>

<!-- Footer -->
<footer id="footer">

    <ul class="icons">
    </ul>
    
    <span class="copyright">
    <a onclick="javascript:pageTracker._trackPageview('/outgoing/db.cs.cmu.edu');" href="https://db.cs.cmu.edu" title="Carnegie Mellon Database Group" class="image-link"><img src="../images/cmu-db-group.png"></a>
    </span>

</footer>    <!-- Google Analytics -->
    <script type="text/javascript">

        var _gaq = _gaq || [];
        _gaq.push(['_setAccount', 'UA-4067813-24']);
        _gaq.push(['_trackPageview']);

        (function () {
            var ga = document.createElement('script');
            ga.type = 'text/javascript';
            ga.async = true;
            ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
            var s = document.getElementsByTagName('script')[0];
            s.parentNode.insertBefore(ga, s);
        })();
    </script>
    <!-- End Google Analytics Code -->

</body>
</html>